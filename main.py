from fastapi import FastAPI, Request
import os
import requests
import json

app = FastAPI()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TV_WEBHOOK_SECRET = os.getenv("TV_WEBHOOK_SECRET")  # dessston

ADMIN_IDS = [8200781854, 885033881] 
bot_enabled = True

# -------------------- –¢–æ–∫–µ–Ω—ã --------------------
SECTIONS = {
    "Main": ["BTCUSDT.P", "ETHUSDT.P", "SOLUSDT.P", "XRPUSDT.P"],
    "DEFI": ["AAVEUSDT.P", "ENAUSDT.P", "HYPEUSDT.P", "JTOUSDT.P", "JUPUSDT.P", "LDOUSDT.P", "LINKUSDT.P", "UNIUSDT.P"],
    "Meme": ["1000PEPEUSDT.P", "DOGEUSDT.P", "FARTCOINUSDT.P", "ORDIUSDT.P", "PENGUUSDT.P", "POPUSDT.P", "PUMPUSDT.P", "WIFUSDT.P"],
    "AI": ["AI16ZUSDT.P", "ARCUSDT.P", "FHEUSDT.P", "API3USDT.P"],
    "Layer 1 & 2": ["APTUSDT.P", "AVAXUSDT.P", "BCHUSDT.P", "BNBUSDT.P", "OPUSDT.P", "SEIUSDT.P", "SUIUSDT.P", "TIAUSDT.P", "WLDUSDT.P"],
    "Lst": ["LDOUSDT.P", "LAYERUSDT.P", "FXSUSDT.P"]
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: True = –≤–∫–ª—é—á–µ–Ω
token_states = {token: True for section in SECTIONS.values() for token in section}

# -------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
def send_telegram(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(url, data=data)

# -------------------- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º --------------------
def send_control_panel():
    keyboard = {
        "inline_keyboard": [
            [{"text": "Bot On ‚úÖ", "callback_data": "enable"}],
            [{"text": "Bot Off ‚ùå", "callback_data": "disable"}],
            [{"text": "Status ‚ÑπÔ∏è", "callback_data": "status"}],
            [{"text": "Tokens", "callback_data": "tokens"}]
        ]
    }
    for admin_id in ADMIN_IDS:
        send_telegram(admin_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:", reply_markup=keyboard)

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ --------------------
def build_token_keyboard(section_tokens):
    keyboard = []
    row = []
    for i, token in enumerate(section_tokens, 1):
        state = "‚úÖ" if token_states.get(token, True) else "‚ùå"
        row.append({"text": f"{token} {state}", "callback_data": token})
        if i % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}])
    return {"inline_keyboard": keyboard}

def send_section_panel(chat_id, section_tokens, message_id=None):
    keyboard = build_token_keyboard(section_tokens)
    if message_id:
        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageReplyMarkup", data={
            "chat_id": chat_id,
            "message_id": message_id,
            "reply_markup": json.dumps(keyboard)
        })
    else:
        send_telegram(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã:", reply_markup=keyboard)

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def toggle_token(token):
    token_states[token] = not token_states.get(token, True)

def get_section_tokens(token):
    for section in SECTIONS.values():
        if token in section:
            return section
    return []

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView --------------------
@app.api_route("/tv-signal", methods=["POST"])
async def webhook(request: Request):
    global bot_enabled
    data = await request.json()
    if "secret" not in data or data["secret"] != TV_WEBHOOK_SECRET:
        return {"status": "error", "message": "Invalid secret"}

    if bot_enabled and token_states.get(data["symbol"], False):
        message = f"{data['symbol']} | {data['interval']} | {data['signal']} | Price: {data['price']}"
        for admin_id in ADMIN_IDS:
            send_telegram(admin_id, message)
        print("–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", message)
    else:
        print("–°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω.")

    return {"status": "ok"}

# -------------------- Ping endpoint --------------------
@app.post("/ping")
async def ping_endpoint(request: Request):
    data = await request.json()
    print("Ping received:", data)
    return {"status": "ok"}

# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ --------------------
@app.post("/bot-control")
async def bot_control(request: Request):
    global bot_enabled
    data = await request.json()

    # Callback –∫–Ω–æ–ø–æ–∫
    if "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        user_id = query["from"]["id"]
        action = query["data"]
        message_id = query["message"]["message_id"]

        if user_id not in ADMIN_IDS:
            send_telegram(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return {"ok": True}

        if action == "enable":
            bot_enabled = True
            send_control_panel()
        elif action == "disable":
            bot_enabled = False
            send_control_panel()
        elif action == "status":
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if bot_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚õî"
            send_telegram(chat_id, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        elif action == "tokens":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
            keyboard = {"inline_keyboard": [[{"text": s, "callback_data": f"section_{s}"}] for s in SECTIONS.keys()]}
            keyboard["inline_keyboard"].append([{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}])
            send_telegram(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=keyboard)
        elif action.startswith("section_"):
            section_name = action.replace("section_", "")
            send_section_panel(chat_id, SECTIONS[section_name], message_id=message_id)
        elif action in token_states:
            toggle_token(action)
            section_tokens = get_section_tokens(action)
            send_section_panel(chat_id, section_tokens, message_id=message_id)
        elif action == "back":
            send_control_panel()

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    elif "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        user_id = data["message"]["from"]["id"]
        text = data["message"]["text"].strip().lower()
        if user_id not in ADMIN_IDS:
            return {"status": "error", "message": "Unauthorized"}

        if text == "/on":
            bot_enabled = True
            send_control_panel()
        elif text == "/off":
            bot_enabled = False
            send_control_panel()
        elif text == "/status":
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if bot_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚õî"
            send_telegram(chat_id, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        elif text == "/tokens":
            keyboard = {"inline_keyboard": [[{"text": s, "callback_data": f"section_{s}"}] for s in SECTIONS.keys()]}
            keyboard["inline_keyboard"].append([{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "back"}])
            send_telegram(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=keyboard)

    return {"ok": True}

# -------------------- –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ --------------------
@app.on_event("startup")
async def startup_event():
    send_control_panel()
