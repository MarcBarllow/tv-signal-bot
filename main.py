from fastapi import FastAPI, Request
import os
import requests
import json

app = FastAPI()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TV_WEBHOOK_SECRET = os.getenv("TV_WEBHOOK_SECRET")  # dessston

ADMIN_IDS = [8200781854, 885033881]
bot_enabled = True

# –°—Ç–∞—Ç—É—Å –º–æ–Ω–µ—Ç (True = –∞–∫—Ç–∏–≤–Ω–∞, False = –æ—Ç–∫–ª—é—á–µ–Ω–∞)
coin_status = {}

# -------------------- –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ —Å–µ–∫—Ü–∏—è–º --------------------
sections = {
    "Main": ["BTCUSDT.P", "ETHUSDT.P", "SOLUSDT.P", "XRPUSDT.P"],
    "DEFI": ["AAVEUSDT.P","ENAUSDT.P","HYPEUSDT.P","JTOUSDT.P","JUPUSDT.P","LDOUSDT.P","LINKUSDT.P","UNIUSDT.P"],
    "Meme": ["1000PEPEUSDT.P","DOGEUSDT.P","FARTCOINUSDT.P","ORDIUSDT.P","PENGUUSDT.P","POPCATUSDT.P","PUMPUSDT.P","WIFUSDT.P"],
    "AI": ["AI16ZUSDT.P","ARCUSDT.P","FHEUSDT.P","API3USDT.P"],
    "Layer1&2": ["APTUSDT.P","AVAXUSDT.P","BCHUSDT.P","BNBUSDT.P","OPUSDT.P","SEIUSDT.P","SUIUSDT.P","TIAUSDT.P","WLDUSDT.P"],
    "Lst": ["LDOUSDT.P","LAYERUSDT.P","FXSUSDT.P"]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–µ—Ç
for sec_coins in sections.values():
    for coin in sec_coins:
        coin_status[coin] = True

# -------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
def send_telegram(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(url, data=data)

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def build_main_keyboard():
    keyboard = [
        [
            {"text": "Bot On ‚úÖ", "callback_data": "enable"},
            {"text": "Bot Off ‚ùå", "callback_data": "disable"},
            {"text": "Status ‚ÑπÔ∏è", "callback_data": "status"}
        ],
        [
            {"text": "Tokens üéØ", "callback_data": "tokens"}
        ]
    ]
    return {"inline_keyboard": keyboard}

def build_tokens_keyboard(section=None):
    keyboard = []
    if section is None:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–µ–∫—Ü–∏–π
        row = []
        for sec in sections.keys():
            row.append({"text": sec, "callback_data": f"section_{sec}"})
            if len(row) >= 3:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        keyboard.append([{"text": "Back ‚¨ÖÔ∏è", "callback_data": "back"}])
    else:
        # –ö–Ω–æ–ø–∫–∏ –º–æ–Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        row = []
        for coin in sections[section]:
            emoji = "‚úÖ" if coin_status.get(coin, True) else "‚ùå"
            row.append({"text": f"{coin} {emoji}", "callback_data": f"coin_{coin}"})
            if len(row) >= 3:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        keyboard.append([{"text": "Back ‚¨ÖÔ∏è", "callback_data": "tokens"}])
    return {"inline_keyboard": keyboard}

# -------------------- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è --------------------
def send_control_panel():
    for admin_id in ADMIN_IDS:
        send_telegram(admin_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:", reply_markup=build_main_keyboard())

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView --------------------
@app.api_route("/tv-signal", methods=["POST"])
async def webhook(request: Request):
    global bot_enabled
    data = await request.json()

    if "secret" not in data or data["secret"] != TV_WEBHOOK_SECRET:
        return {"status": "error", "message": "Invalid secret"}

    coin = data["symbol"]
    if bot_enabled and coin_status.get(coin, True):
        message = f"{data['symbol']} | {data['interval']} | {data['signal']} | Price: {data['price']}"
        send_telegram(TELEGRAM_CHAT_ID, message)
        print("–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", message)
    else:
        print("–°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –º–æ–Ω–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    return {"status": "ok"}

# -------------------- Ping endpoint --------------------
@app.post("/ping")
async def ping_endpoint(request: Request):
    data = await request.json()
    print("Ping received:", data)
    return {"status": "ok"}

# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ --------------------
@app.post("/bot-control")
async def bot_control(request: Request):
    global bot_enabled
    data = await request.json()

    chat_id = None
    user_id = None
    action = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        user_id = query["from"]["id"]
        action = query["data"]

        if user_id not in ADMIN_IDS:
            send_telegram(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
            return {"ok": True}

        # –í–∫–ª/–í—ã–∫–ª/–°—Ç–∞—Ç—É—Å
        if action == "enable":
            bot_enabled = True
        elif action == "disable":
            bot_enabled = False
        elif action == "status":
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if bot_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚õî"
            send_telegram(chat_id, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        elif action == "tokens":
            send_telegram(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=build_tokens_keyboard())
        elif action.startswith("section_"):
            sec_name = action.replace("section_", "")
            send_telegram(chat_id, f"–°–µ–∫—Ü–∏—è {sec_name}:", reply_markup=build_tokens_keyboard(sec_name))
        elif action.startswith("coin_"):
            coin_name = action.replace("coin_", "")
            coin_status[coin_name] = not coin_status[coin_name]  # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            sec_name = None
            for sec, coins in sections.items():
                if coin_name in coins:
                    sec_name = sec
                    break
            if sec_name:
                send_telegram(chat_id, f"–°–µ–∫—Ü–∏—è {sec_name}:", reply_markup=build_tokens_keyboard(sec_name))
        elif action == "back":
            send_telegram(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    elif "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        user_id = data["message"]["from"]["id"]
        text = data["message"]["text"].strip().lower()

        if user_id not in ADMIN_IDS:
            return {"status": "error", "message": "Unauthorized"}

        if text == "/on":
            bot_enabled = True
        elif text == "/off":
            bot_enabled = False
        elif text == "/status":
            status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if bot_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚õî"
            send_telegram(chat_id, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        elif text == "/tokens":
            send_telegram(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=build_tokens_keyboard())
        else:
            send_telegram(chat_id, "–ö–æ–º–∞–Ω–¥—ã: /on, /off, /status, /tokens")

    return {"ok": True}

# -------------------- –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è --------------------
@app.on_event("startup")
async def startup_event():
    send_control_panel()
